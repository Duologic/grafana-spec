{
   "openapi": "3.0.0",
   "info": {
      "title": "Generated by cue.",
      "version": "no version"
   },
   "paths": {},
   "components": {
      "schemas": {
         "Family": {
            "description": "A family is a collection of schemas that specify a single kind of object,\nallowing evolution of the canonical schema for that kind of object over time.\n\nThe schemas are organized into a list of Lineages, which are themselves ordered\nlists of schemas where each schema with its predecessor in the lineage.\n\nIf it is desired to define a schema with a breaking schema relative to its\npredecessors, a new Lineage must be created, as well as a Migration that defines\na mapping to the new schema from the latest schema in prior Lineage.\n\nThe version number of a schema is not controlled by the schema itself, but by\nits position in the list of lineages - e.g., 0.0 corresponds to the first\nschema in the first lineage.",
            "type": "object",
            "required": [
               "lineages",
               "migrations",
               "latest"
            ],
            "properties": {
               "compose": {
                  "type": "object"
               },
               "lineages": {
                  "type": "array",
                  "minItems": 1,
                  "items": [
                     {
                        "$ref": "#/components/schemas/Lineage"
                     }
                  ],
                  "default": [
                     [
                        {}
                     ]
                  ],
                  "additionalItems": {
                     "$ref": "#/components/schemas/Lineage"
                  }
               },
               "migrations": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/Migration"
                  }
               },
               "latest": {
                  "type": "object",
                  "$ref": "#/components/schemas/LastSchema"
               }
            }
         },
         "Family.lineages.0.0.FieldColor": {
            "description": "TODO docs",
            "type": "object",
            "required": [
               "mode"
            ],
            "properties": {
               "mode": {
                  "description": "The main color scheme mode",
                  "type": "string",
                  "oneOf": [
                     {
                        "enum": [
                           "thresholds",
                           "palette-classic",
                           "palette-saturated",
                           "continuous-GrYlRd",
                           "fixed"
                        ]
                     },
                     {}
                  ]
               },
               "fixedColor": {
                  "description": "Stores the fixed color value if mode is fixed",
                  "type": "string"
               },
               "seriesBy": {
                  "$ref": "#/components/schemas/Family.lineages.0.0.FieldColorSeriesByMode"
               }
            }
         },
         "Family.lineages.0.0.FieldColorModeId": {
            "description": "TODO docs",
            "type": "string",
            "enum": [
               "thresholds",
               "palette-classic",
               "palette-saturated",
               "continuous-GrYlRd",
               "fixed"
            ]
         },
         "Family.lineages.0.0.FieldColorSeriesByMode": {
            "description": "TODO docs",
            "type": "string",
            "enum": [
               "min",
               "max",
               "last"
            ]
         },
         "Family.lineages.0.0.GraphPanel": {
            "description": "Support for legacy graph panels.",
            "type": "object",
            "required": [
               "type",
               "thresholds",
               "seriesOverrides",
               "bars",
               "dashes",
               "dashLength",
               "hiddenSeries",
               "legend",
               "lines",
               "nullPointMode",
               "percentage",
               "points",
               "renderer",
               "spaceLength",
               "stack",
               "steppedLine"
            ],
            "properties": {
               "type": {
                  "type": "string",
                  "enum": [
                     "graph"
                  ]
               },
               "thresholds": {
                  "type": "array",
                  "items": {
                     "type": "object"
                  }
               },
               "timeRegions": {
                  "type": "array",
                  "items": {
                     "type": "object"
                  }
               },
               "seriesOverrides": {
                  "type": "array",
                  "items": {
                     "type": "object"
                  }
               },
               "aliasColors": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "string"
                  }
               },
               "bars": {
                  "type": "boolean",
                  "default": false
               },
               "dashes": {
                  "type": "boolean",
                  "default": false
               },
               "dashLength": {
                  "type": "number",
                  "default": 10
               },
               "fill": {
                  "type": "number"
               },
               "fillGradient": {
                  "type": "number"
               },
               "hiddenSeries": {
                  "type": "boolean",
                  "default": false
               },
               "legend": {
                  "type": "object"
               },
               "lines": {
                  "type": "boolean",
                  "default": false
               },
               "linewidth": {
                  "type": "number"
               },
               "nullPointMode": {
                  "type": "string",
                  "enum": [
                     "null",
                     "connected",
                     "null as zero"
                  ],
                  "default": "null"
               },
               "percentage": {
                  "type": "boolean",
                  "default": false
               },
               "points": {
                  "type": "boolean",
                  "default": false
               },
               "pointradius": {
                  "type": "number"
               },
               "renderer": {
                  "type": "string"
               },
               "spaceLength": {
                  "type": "number",
                  "default": 10
               },
               "stack": {
                  "type": "boolean",
                  "default": false
               },
               "steppedLine": {
                  "type": "boolean",
                  "default": false
               },
               "tooltip": {
                  "type": "object",
                  "required": [
                     "sort",
                     "value_type"
                  ],
                  "properties": {
                     "shared": {
                        "type": "boolean"
                     },
                     "sort": {
                        "type": "number",
                        "default": 0
                     },
                     "value_type": {
                        "type": "string",
                        "enum": [
                           "individual",
                           "cumulative"
                        ],
                        "default": "individual"
                     }
                  }
               }
            }
         },
         "Family.lineages.0.0.Panel": {
            "description": "Dashboard panels. Panels are canonically defined inline\nbecause they share a version timeline with the dashboard\nschema; they do not evolve independently.",
            "type": "object"
         },
         "Family.lineages.0.0.RowPanel": {
            "description": "Row panel",
            "type": "object",
            "required": [
               "type",
               "collapsed",
               "id",
               "panels"
            ],
            "properties": {
               "type": {
                  "type": "string",
                  "enum": [
                     "row"
                  ]
               },
               "collapsed": {
                  "type": "boolean",
                  "default": false
               },
               "title": {
                  "type": "string"
               },
               "datasource": {
                  "description": "Name of default datasource.",
                  "type": "string"
               },
               "gridPos": {
                  "type": "object",
                  "required": [
                     "h",
                     "w",
                     "x",
                     "y"
                  ],
                  "properties": {
                     "h": {
                        "description": "Panel",
                        "type": "number",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "default": 9
                     },
                     "w": {
                        "description": "Panel",
                        "type": "number",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "maximum": 24,
                        "default": 12
                     },
                     "x": {
                        "description": "Panel x",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 24,
                        "exclusiveMaximum": true,
                        "default": 0
                     },
                     "y": {
                        "description": "Panel y",
                        "type": "number",
                        "minimum": 0,
                        "default": 0
                     },
                     "static": {
                        "description": "true if fixed",
                        "type": "boolean"
                     }
                  }
               },
               "id": {
                  "type": "number"
               },
               "panels": {
                  "type": "array",
                  "items": {
                     "type": "object",
                     "oneOf": [
                        {
                           "allOf": [
                              {
                                 "$ref": "#/components/schemas/Family.lineages.0.0.Panel"
                              },
                              {
                                 "not": {
                                    "anyOf": [
                                       {
                                          "$ref": "#/components/schemas/Family.lineages.0.0.GraphPanel"
                                       }
                                    ]
                                 }
                              }
                           ]
                        },
                        {
                           "$ref": "#/components/schemas/Family.lineages.0.0.GraphPanel"
                        }
                     ]
                  }
               }
            }
         },
         "Family.lineages.0.0.Target": {
            "description": "Schema for panel targets is specified by datasource\nplugins. We use a placeholder definition, which the Go\nschema loader either left open/as-is with the Base\nvariant of the Dashboard and Panel families, or filled\nwith types derived from plugins in the Instance variant.\nWhen working directly from CUE, importers can extend this\ntype directly to achieve the same effect.",
            "type": "object"
         },
         "Family.lineages.0.0.Threshold": {
            "description": "TODO docs",
            "type": "object",
            "required": [
               "color"
            ],
            "properties": {
               "value": {
                  "description": "TODO docs\nFIXME the corresponding typescript field is required/non-optional, but nulls currently appear here when serializing -Infinity to JSON",
                  "type": "number"
               },
               "color": {
                  "description": "TODO docs",
                  "type": "string"
               },
               "state": {
                  "description": "TODO docs\nTODO are the values here enumerable into a disjunction?\nSome seem to be listed in typescript comment",
                  "type": "string"
               }
            }
         },
         "Family.lineages.0.0.ThresholdsConfig": {
            "type": "object",
            "required": [
               "mode",
               "steps"
            ],
            "properties": {
               "mode": {
                  "$ref": "#/components/schemas/Family.lineages.0.0.ThresholdsMode"
               },
               "steps": {
                  "description": "Must be sorted by 'value', first value is always -Infinity",
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/Family.lineages.0.0.Threshold"
                  }
               }
            }
         },
         "Family.lineages.0.0.ThresholdsMode": {
            "type": "string",
            "enum": [
               "absolute",
               "percentage"
            ]
         },
         "Family.lineages.0.0.Transformation": {
            "description": "TODO docs\nFIXME this is extremely underspecfied; wasn't obvious which typescript types corresponded to it",
            "type": "object",
            "required": [
               "id",
               "options"
            ],
            "properties": {
               "id": {
                  "type": "string"
               },
               "options": {
                  "type": "object"
               }
            }
         },
         "LastSchema": {
            "type": "object",
            "$ref": "#/components/schemas/LastSchema._p.0"
         },
         "LastSchema._p.0": {
            "type": "object"
         },
         "Lineage": {
            "description": "A Lineage is a non-empty list containing an ordered series of schemas that\nall describe a single kind of object, where each schema is backwards\ncompatible with its predecessor.",
            "type": "array",
            "minItems": 1,
            "items": [
               {
                  "type": "object"
               }
            ],
            "default": [
               {}
            ],
            "additionalItems": {
               "type": "object"
            }
         },
         "Migration": {
            "description": "A Migration defines a relation between two schemas, \"_from\" and \"_to\". The\nrelation expresses any complex mappings that must be performed to\ntransform an input artifact valid with respect to the _from schema, into\nan artifact valid with respect to the _to schema. This is accomplished\nin two stages:\n  1. A Migration is initially defined by passing in schemas for _from and _to,\n     and mappings that translate _from to _to are defined in _rel.\n  2. A concrete object may then be unified with _to, resulting in its values\n     being mapped onto \"result\" by way of _rel.\n\nThis is the absolute simplest possible definition of a Migration. It's\nincumbent on the implementor to manually ensure the correctness and\ncompleteness of the mapping. The primary value in defining such a generic\nstructure is to allow comparably generic logic for migrating concrete\nartifacts through schema changes.\n\nIf _to isn't backwards compatible (accretion-only) with _from, then _rel must\nexplicitly enumerate every field in _from and map it to a field in _to, even\nif they're identical. This is laborious for anything outside trivially tiny\nschema. We'll want to eventually add helpers for whitelisting or blacklisting\nof paths in _from, so that migrations of larger schema can focus narrowly on\nthe points of actual change.",
            "type": "object",
            "required": [
               "from",
               "to",
               "rel",
               "result"
            ],
            "properties": {
               "from": {
                  "type": "object"
               },
               "to": {
                  "type": "object"
               },
               "rel": {
                  "type": "object"
               },
               "result": {
                  "$ref": "#/components/schemas/Migration.to"
               }
            }
         },
         "Migration.to": {
            "type": "object"
         },
         "PanelFamily": {
            "description": "Panel plugin-specific Family",
            "type": "object",
            "required": [
               "lineages",
               "migrations"
            ],
            "properties": {
               "lineages": {
                  "type": "array",
                  "minItems": 1,
                  "items": [
                     {
                        "$ref": "#/components/schemas/PanelLineage"
                     }
                  ],
                  "default": [
                     [
                        {
                           "PanelOptions": {}
                        }
                     ]
                  ],
                  "additionalItems": {
                     "$ref": "#/components/schemas/PanelLineage"
                  }
               },
               "migrations": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/Migration"
                  }
               }
            }
         },
         "PanelLineage": {
            "description": "A lineage of panel schema",
            "type": "array",
            "minItems": 1,
            "items": [
               {
                  "$ref": "#/components/schemas/PanelSchema"
               }
            ],
            "default": [
               {
                  "PanelOptions": {}
               }
            ],
            "additionalItems": {
               "$ref": "#/components/schemas/PanelSchema"
            }
         },
         "PanelSchema": {
            "description": "Definition of the shape of a panel plugin's schema declarations in its\nschema.cue file.\n\nNote that these keys do not appear directly in any real JSON artifact;\nrather, they are composed into panel structures as they are defined within\nthe larger Dashboard schema.",
            "type": "object",
            "required": [
               "PanelOptions"
            ],
            "properties": {
               "PanelOptions": {
                  "description": "Defines plugin specific options for a panel",
                  "type": "object"
               },
               "PanelFieldConfig": {
                  "description": "Define the custom properties that exist within standard field config",
                  "type": "object"
               }
            }
         }
      }
   }
}
